<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>Register2</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Register2</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.10.2</junit.version>
    </properties>
    <!-- 👇 CONFIGURAZIONE RISORSE (importante per includere il file .db nel classpath) -->
    <build>
        <resources>
            <!-- Include normalmente tutte le risorse da src/main/resources -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>

            <!-- Include anche i file .db dalla cartella src/main/db -->
            <!-- E li copia nella cartella di output (target/classes), che è il classpath -->
            <resource>
                <directory>src/main/db</directory>
                <targetPath>${project.build.outputDirectory}</targetPath>
                <includes>
                    <include>**/*.db</include> <!-- Solo i file con estensione .db -->
                </includes>
            </resource>
        </resources>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>21</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>21</version>
        </dependency>
        <dependency>
            <!-- Inizia la definizione di una dipendenza Maven -->

            <groupId>org.xerial</groupId>
            <!--
                Identifica il “gruppo” o l’organizzazione che pubblica la libreria.
                In questo caso “org.xerial” è il gruppo che mantiene il driver JDBC per SQLite.
            -->

            <artifactId>sqlite-jdbc</artifactId>
            <!--
                È il nome specifico dell’artefatto (la libreria) da includere.
                “sqlite-jdbc” è il driver JDBC che permette a Java di leggere e scrivere su un database SQLite.
            -->

            <version>3.41.2.2</version>
            <!--
                Specifica la versione esatta dell’artefatto da scaricare.
                La versione 3.36.0.1 garantisce compatibilità con funzionalità di SQLite e del driver di quell’epoca.
            -->
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>jakarta.mail</artifactId>
            <version>2.0.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>com.example.register2/com.esa.moviestar.HelloApplication</mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
